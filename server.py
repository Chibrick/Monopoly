import socket
import threading
import pickle
import struct
import time
import logging
import random
import math
import os
import select
import traceback
import operator
from player import Player
from game import Game
from constants import *

class Server:
    def __init__(self, host="localhost", port=5555, ready_event=None):
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.host = host
        self.port = port
        self.addr = (self.host, self.port)
        self.players = []
        self.lock = threading.Lock()
        self.game = None
        self.ready_event = ready_event

        self.board_data = BOARD1
        self.count_circle = 1
        self.refresh_board()
        self.board_id = 1
        self.is_mode = False
        self.bank = 0

        self.events = []
        self.running = True
        self.next_player_id = 0
        self.trade_offer = None
        self.roll_dice_count = 0
        self.awaiting_property_decision = None  # dict with player_id and property_index
        self.dice1 = 0
        self.dice2 = 0
        self.auction = None
        self.last_dice_result = None

        self.abilities_by_player = {}  # {player_id: [{"name": str, "count": int, "price": int}]}

        self.BINARY_OPS = [
            ("+", lambda a, b: a + b, 1),
            ("-", lambda a, b: a - b, 1),
            ("*", lambda a, b: a * b, 2),
            # ("**", lambda a, b: a ** b if abs(b) < 5 else float('inf'), 4),
            # ("//", lambda a, b: a // b if b != 0 else float('inf'), 2),
            # ("%", lambda a, b: a % b if b != 0 else float('inf'), 2)
        ]

        self.UNARY_OPS = [
            ("abs({x})", lambda x: abs(x), 2),
            # ("‚àö({x})", lambda x: math.sqrt(x) if x >= 0 else float('inf'), 3),
            ("-({x})", lambda x: -x, 1)
        ]
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[logging.StreamHandler()]
        )
        self.logger = logging.getLogger(__name__)

    def refresh_board(self):
        fixed_indices = [0, 10, 20, 30]

        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–µ—Ç–∫–∏ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
        old_board = self.board_data
        index_to_owner = {}
        for i, cell in enumerate(old_board):
            owner_id = cell.get("owner")
            if owner_id is not None:
                index_to_owner[i] = owner_id

        # 2. –û—Ç–¥–µ–ª—è–µ–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
        fixed_cells = {i: old_board[i] for i in fixed_indices}
        shuffle_cells = [cell for i, cell in enumerate(old_board) if i not in fixed_indices]
        random.shuffle(shuffle_cells)

        # 3. –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –¥–æ—Å–∫—É
        new_board = []
        shuffle_iter = iter(shuffle_cells)
        new_index_mapping = {}  # –∫–ª—é—á: —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å ‚Üí –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
        for i in range(len(old_board)):
            if i in fixed_cells:
                new_board.append(fixed_cells[i])
                new_index_mapping[i] = i  # –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ –º–µ—Å—Ç–µ
            else:
                old_cell = next(shuffle_iter)
                old_index = old_board.index(old_cell)
                new_board.append(old_cell)
                new_index_mapping[old_index] = i

        # 4. –û–±–Ω–æ–≤–ª—è–µ–º board_data
        self.board_data = new_board

        # 5. –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏
        for cell in self.board_data:
            cell["owner"] = None
            cell["color_owner"] = None

        for old_index, owner_id in index_to_owner.items():
            new_index = new_index_mapping.get(old_index)
            if new_index is not None:
                self.board_data[new_index]["owner"] = owner_id
                player = self.get_player_by_id(owner_id)
                if player:
                    self.board_data[new_index]["color_owner"] = player.color

        # 6. –û–±–Ω–æ–≤–ª—è–µ–º player.properties
        for player in self.players:
            player.properties = [
                i for i, cell in enumerate(self.board_data)
                if cell.get("owner") == player.id
            ]

        # 7. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
        if self.count_circle == 1:
            self.assign_cell_images_and_names()
        else:
            self.board_id += 1
            self.events.append(f"üîÄ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏")

    def assign_cell_images_and_names(self):
        used_images_by_type = {
            "property": {},
            "cars": set(),
            "utility": set(),
            "tax": set(),
            "quest": set(),
            "start": set(),
            "jail": set(),
            "casino": set(),
            "gotojail": set(),
        }

        for i, cell in enumerate(self.board_data):
            cell_type = cell["type"]

            if cell_type == "property":
                category_path = f"images/property/{int(cell['category'])}"
                used = used_images_by_type[cell_type].setdefault(int(cell.get("category", 0)), set())
            elif cell_type == "cars":
                category_path = "images/cars"
                used = used_images_by_type[cell_type]
            elif cell_type == "utility":
                category_path = f"images/utility"
                used = used_images_by_type[cell_type]
            elif cell_type == "tax":
                category_path = f"images/tax"
                used = used_images_by_type[cell_type]
            elif cell_type == "quest":
                category_path = f"images/quest"
                used = used_images_by_type[cell_type]
            elif cell_type in ("start", "jail", "casino", "gotojail"):
                category_path = "images/General"
                used = used_images_by_type[cell_type]
            else:
                continue  # –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º

            prefix = cell["type"].lower() if cell["type"] in ("start", "jail", "casino", "gotojail", "quest", "tax") else ""
            try:
                image_files = [f for f in os.listdir(category_path) if f.lower().endswith(".png")]

                # –ï—Å–ª–∏ —Å–ø–µ—Ü. —Ç–∏–ø ‚Äî –æ—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
                if cell_type in ("start", "jail", "casino", "gotojail"):
                    prefix = cell_type.lower()
                    image_files = [f for f in image_files if f.lower().startswith(prefix)]

                # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
                available = [f for f in image_files if f not in used]

                if available:
                    selected = random.choice(available)
                    used.add(selected)
                    cell["image"] = os.path.join(category_path, selected)
                    cell["name"] = os.path.splitext(selected)[0]
                else:
                    # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ‚Äî –Ω–µ –Ω–∞–∑–Ω–∞—á–∞–µ–º
                    cell["image"] = None
                if prefix:
                    cell["name"] = prefix

            except FileNotFoundError:
                print(f"[assign_cell_images_and_names] –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {category_path}")
                cell["image"] = None

    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            self.server.bind(self.addr)
            self.server.listen()
            self.logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")
            if self.ready_event:
                self.ready_event.set()
            
            # –ó–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏—ë–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ!
            threading.Thread(target=self.accept_connections, daemon=True).start()
            # –ü–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            accept_thread = threading.Thread(target=self.accept_connections)
            accept_thread.daemon = True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ daemon-–ø–æ—Ç–æ–∫
            accept_thread.start()

            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Å–µ—Ä–≤–µ—Ä–∞
            while self.running:
                time.sleep(1)  # –ß—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
                
        except socket.error as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        finally:
            self.running = False
            self.server.close()
            self.logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def accept_connections(self):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        while self.running:
            
            try:
                conn, addr = self.server.accept()
                self.logger.info(f"–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {addr}")
                
                with self.lock:
                    player_id = self.next_player_id
                    self.next_player_id += 1
                    player = Player(player_id, f"–ò–≥—Ä–æ–∫ {player_id + 1}", PLAYER_COLORS[random.randint(0, 5)])
                    player.conn = conn  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    self.abilities_by_player[player.id] = [
                        {"name": "–¢–µ–ª–µ–ø–æ—Ä—Ç", "count": 0, "price": 300},
                        # {"name": "–ö—Ä–∞–∂–∞ –¥–µ–Ω–µ–≥", "count": 0, "price": 200}
                        # {"name": "–ö–∞–∑–∏–Ω–æ", "count": 0, "price": 100}
                        # {"name": "–í—ã—Ö–æ–¥ –∏–∑ —Ç—é—Ä—å–º—ã", "count": 0, "price": 100}
                    ]
                    self.players.append(player)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
                thread = threading.Thread(target=self.handle_client, args=(conn, player))
                thread.daemon = True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ daemon-–ø–æ—Ç–æ–∫
                thread.start()
                
            except socket.error as e:
                if self.running:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                break
    
    def handle_client(self, conn, player):
        try:
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ {player.id} ({player.name})")
            self.send_data(conn, player.id)
            while self.running:
                data = self.receive_data(conn)
                if not data:
                    break
                self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç {player.name}: {data}")
                self.process_client_command(conn, player, data)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ {player.id}: {e}\n{traceback.format_exc()}")
        finally:
            with self.lock:
                self.players = [p for p in self.players if p.id != player.id]

                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∏–≥—Ä–æ–∫–∞
                for cell in self.board_data:
                    if cell["owner"] == player.id:
                        cell["owner"] = None

                if self.game:
                    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö ID
                    self.game.players = [pid for pid in self.game.players if pid != player.id]

                    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –±—ã–ª –µ–≥–æ —Ö–æ–¥ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                    if self.game.current_player == player.id:
                        if player.must_resolve_tile:
                            self.events.append("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–µ—Ç–∫–æ–π.")
                            return
                        # –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                        remaining_ids = [p.id for p in self.players if not p.bankrupt and not p.is_spectator]
                        if remaining_ids:
                            self.game.current_player = remaining_ids[0]
                            self.game.next_turn(self.players)
                            if self.game.next_circle:
                                self.decrement_zalogs()
                                self.game.next_circle = False
                            self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
                        else:
                            self.events.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
                    active_players = [p for p in self.players if not p.bankrupt and not p.is_spectator]
                    if len(active_players) == 1:
                        self.game.winner = active_players[0].id
                        self.events.append(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {active_players[0].name}")
                        self.check_game_end()

            self.broadcast_game_state()
    
    def receive_data(self, conn):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        try:
            ready = select.select([conn], [], [], 0.1)  # 100–º—Å —Ç–∞–π–º–∞—É—Ç
            size_data = conn.recv(4)
            if not size_data:
                return None
            data_size = struct.unpack('!I', size_data)[0]
            received_data = b""
            while len(received_data) < data_size:
                packet = conn.recv(min(4096, data_size - len(received_data)))
                if not packet:
                    return None
                received_data += packet
            return pickle.loads(received_data)
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def send_data(self, conn, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ö —Ä–∞–∑–º–µ—Ä–∞ –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            serialized_data = pickle.dumps(data)
            conn.send(struct.pack('!I', len(serialized_data)))
            conn.send(serialized_data)
        except socket.error as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def process_client_command(self, conn, player, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        command = data.get("command")
        if self.last_dice_result:
            self.last_dice_result["animation_dice"] = False
        with self.lock:
            if command == "update_player":
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ (–∏–º—è, —Ü–≤–µ—Ç, –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å)
                player.name = data.get("name", player.name)
                player.color = data.get("color", player.color)
                player.is_ready = data.get("is_ready", player.is_ready)
                host_player = next((p for p in sorted(self.players, key=lambda p: p.id) if not p.is_spectator), None)
                if host_player and host_player.id == player.id:
                    self.is_mode = data.get("is_mode", False)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
                if all(p.is_ready for p in self.players) and len(self.players) >= 2 and (not self.game):
                    print(f"–Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É:")
                    self.start_game()
                
            elif command == "roll_dice" and self.game and self.game.current_player == player.id:
                if player.must_resolve_tile:
                            self.events.append("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–µ—Ç–∫–æ–π.")
                            return
                # –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤
                self.dice1 = random.randint(1, 6)
                self.dice2 = random.randint(1, 6)
                total_roll = self.dice1 + self.dice2
                self.last_dice_result = {
                    "player_id": player.id,
                    "value": total_roll,
                    "dice1": self.dice1,
                    "dice2": self.dice2,
                    "animation": True,
                    "animation_dice": True
                }
                self.events.append(f"{player.name} –≤—ã–±—Ä–æ—Å–∏–ª {self.dice1} –∏ {self.dice2}")
                if (self.roll_dice_count == 2 and self.dice1 == self.dice2 and (not player.in_jail)):
                        player.position = next(i for i, c in enumerate(self.board_data) if c["type"] == "jail")
                        player.in_jail = True
                        self.events.append(f"{player.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç—é—Ä—å–º—É!")
                        self.game.next_turn(self.players)
                        if self.game.next_circle:
                                self.decrement_zalogs()
                                self.game.next_circle = False
                        self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
                        self.roll_dice_count = 0
                elif (player.in_jail and self.dice1 == self.dice2):    
                    player.in_jail = False
                    self.events.append(f"{player.name} –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Ç—é—Ä—å–º—ã")
                    self.roll_dice_count = 0
                    self.move_player(player, self.dice1 + self.dice2)
                else:
                    self.move_player(player, self.dice1 + self.dice2)
                
            elif command == "use_ability":
                ability_name = data.get("ability")
                value = data.get("value")
                player_abilities = self.abilities_by_player.get(player.id, [])
                for ab in player_abilities:
                    if ab["name"] == ability_name and ab["count"] > 0:
                        if ability_name == "–¢–µ–ª–µ–ø–æ—Ä—Ç" and isinstance(value, int):
                            if value>0 and value<13:
                                ab["count"] -= 1
                                self.events.append(f"{player.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {ability_name}")
                                self.dice1 = value
                                self.dice2 = 0
                                total_roll = self.dice1 + self.dice2
                                self.last_dice_result = {
                                    "player_id": player.id,
                                    "value": total_roll,
                                    "dice1": self.dice1,
                                    "dice2": self.dice2,
                                    "animation": True,
                                    "animation_dice": False
                                }
                                self.move_player(player, self.dice1 + self.dice2)
                            else:
                                self.events.append(f"{player.name}, –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 12")

                        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
                        
                        # ... –¥–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∑–¥–µ—Å—å ...
                # self.broadcast_game_state()

            elif command == "buy_ability":
                ability_name = data.get("ability")
                player_abilities = self.abilities_by_player.get(player.id, [])
                for ab in player_abilities:
                    if ab["name"] == ability_name:
                        if player.money >= ab["price"]:
                            ab["count"] += 1
                            player.money -= ab["price"]
                            self.events.append(f"{player.name} –∫—É–ø–∏–ª —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {ability_name}")
                        else:
                            self.events.append(f"{player.name} –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {ability_name}")
                # self.broadcast_game_state()

            elif command == "bid" and self.game:
                # –£—á–∞—Å—Ç–∏–µ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ
                self.process_bid(player, data.get("amount", 0))
                
            elif command == "pass_auction" and self.game:
                # –ü—Ä–æ–ø—É—Å–∫ –∞—É–∫—Ü–∏–æ–Ω–∞
                try:
                    self.process_pass(player)
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ process_pass –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player.id}: {e}")
                
            elif command == "mortgage" and self.game:
                # –ó–∞–ª–æ–≥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
                self.mortgage_property(player, data.get("property_index"))
                
            elif command == "unmortgage" and self.game:
                # –í—ã–∫—É–ø —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑ –∑–∞–ª–æ–≥–∞
                self.unmortgage_property(player, data.get("property_index"))
                
            elif command == "upgrade_property" and self.game:
                # –£–ª—É—á—à–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
                self.upgrade_property(player, data.get("property_index"))
                
            elif command == "downgrade_property" and self.game:
                # –ü—Ä–æ–¥–∞–∂–∞ —É–ª—É—á—à–µ–Ω–∏—è
                self.downgrade_property(player, data.get("property_index"))
                
            elif command == "propose_trade" and self.game:
                # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
                self.propose_trade(player, data)
                
            elif command == "respond_trade" and self.game and hasattr(self, 'trade_offer'):
                # –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
                accepted = data.get("accept")
                self.process_trade_response(player, data.get("accept", False))

            elif command == "respond_property_choice":
                action = data.get("action")
                prop_index = data.get("property_index")
                cell = self.board_data[prop_index]

                # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
                if hasattr(self, 'auction') and self.auction is not None:
                    self.events.append("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞—É–∫—Ü–∏–æ–Ω!")
                    return

                if self.awaiting_property_decision and self.awaiting_property_decision["player_id"] == player.id:
                    casino_decision = None
                    jail_decision = False
                    if action == "buy":
                        self.buy_property(player)
                        self.awaiting_property_decision = None
                        player.must_resolve_tile = False

                    elif action == "auction":
                        if cell["type"] not in ["property", "cars", "utility"]:
                            self.events.append(f"–ê—É–∫—Ü–∏–æ–Ω –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –Ω–∞ –∫–ª–µ—Ç–∫–µ —Ç–∏–ø–∞ {cell['type']}")
                            return
                        self.events.append(f"{player.name} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø–æ–∫—É–ø–∫–∏ {cell['name']} ‚Äî –∞—É–∫—Ü–∏–æ–Ω")
                        self.start_auction(player)
                        return

                    elif action == "quest_tax":
                        if self.awaiting_property_decision["type"] == "quest":
                            tax = self.awaiting_property_decision["reward"]
                            player.money -= tax

                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
                            other_players = [p for p in self.players if p.id != player.id and not p.is_spectator]
                            if other_players:
                                portion = tax // (len(other_players) + 1)
                                self.bank += portion + (tax % (len(other_players) + 1))
                                self.events.append(f"–ë–∞–Ω–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {portion + (tax % (len(other_players) + 1))}$.")
                                for p in other_players:
                                    p.money += portion
                                self.events.append(f"{player.name} –∑–∞–ø–ª–∞—Ç–∏–ª –∑–∞ –æ—à–∏–±–∫—É {tax}$, –ø–æ {portion}$ –¥–æ—Å—Ç–∞–ª–æ—Å—å –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º.")
                            else:
                                self.bank += tax
                                self.events.append(f"{player.name} –∑–∞–ø–ª–∞—Ç–∏–ª –∑–∞ –æ—à–∏–±–∫—É {tax}$ (–≤—Å–µ —É—à–ª–æ –≤ –±–∞–Ω–∫).")

                        elif self.awaiting_property_decision["type"] == "bonus_for_upgrades":
                            tax = self.awaiting_property_decision["reward"]
                            player.money -= tax
                            self.bank += (tax // 50) * 25
                            self.events.append(f"{player.name} –∑–∞–ø–ª–∞—Ç–∏–ª –∑–∞ –ø—Ä–æ–∫–∞—á–∫—É {tax}$. –ë–∞–Ω–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {(tax // 50) * 25}$ ")

                        elif self.awaiting_property_decision["type"] == "donate_to_bank":
                            tax = self.awaiting_property_decision["reward"]
                            player.money -= tax
                            self.bank += tax
                            self.events.append(f"{player.name} –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª –≤ –ë–∞–Ω–∫ {tax}$ ")

                        elif self.awaiting_property_decision["type"] == "share_with_others":
                            tax = self.awaiting_property_decision["reward"]
                            others = [p for p in self.players if p.id != player.id and not p.is_spectator]
                            if others:
                                per_player = round(tax / len(others))
                                for p in others:
                                    p.money += per_player
                                player.money -= tax
                            self.events.append(f"{player.name} –¥–∞–ª –≤—Å–µ–º –¥–µ–Ω–µ–≥ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ")

                        elif self.awaiting_property_decision["type"] == "exit_jail":
                            tax = self.awaiting_property_decision["reward"]
                            player.money -= tax
                            self.bank += tax
                            self.events.append(f"{player.name} –ó–∞–ø–ª–∞—Ç–∏–ª –∑–∞ –≤—ã—Ö–æ–¥ –∏–∑ —Ç—é—Ä—å–º—ã {tax}$")
                            player.in_jail = False
                            player.jail_turns = 0
                            jail_decision = True
                            self.awaiting_property_decision = None
                            player.must_resolve_tile = False
                            self.move_player(player, self.dice1 + self.dice2)

                        else:
                            self.events.append(f"{player.name} –ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª?????!!!!!!!!!!!!!!!!!!!!!!")
                            
                        self.awaiting_property_decision = None
                        player.must_resolve_tile = False


                    elif action == "pay_tax":
                        tax = cell["price"]
                        player.money -= tax
                        self.events.append(f"{player.name} –∑–∞–ø–ª–∞—Ç–∏–ª –Ω–∞–ª–æ–≥: {tax}$")
                        self.bank += tax
                        self.awaiting_property_decision = None
                        player.must_resolve_tile = False

                    elif action == "casino_bet":
                        amount = 0
                        winnings = data.get("bet", 0)
                        rounds = self.awaiting_property_decision["round"]
                        if rounds == 1:
                            amount = data.get("bet", 0)
                            player.money -= amount
                        ########!!!!!!!!!!!!!!!!!!!!!!!! –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–∞–∑–∏–Ω–æ
                        win = random.choice([False, True])
                        if win:
                            if rounds == 1:
                                winnings = amount * 2
                                self.events.append(f"{player.name} –ø–æ—Å—Ç–∞–≤–∏–ª {amount} –∏ –≤—ã–∏–≥—Ä–∞–ª {winnings} –≤ –∫–∞–∑–∏–Ω–æ! –ü–æ—Ä–∞–¥—É–π—Ç–µ—Å—å")
                            else:
                                winnings = winnings * 2
                                self.events.append(f"{player.name} —Ä–∏—Å–∫–Ω—É–ª –µ—â–µ —Ä–∞–∑ –∏ –≤—ã–∏–≥—Ä–∞–ª {winnings} –≤ –∫–∞–∑–∏–Ω–æ!")
                            rounds += 1

                            if rounds > 3:
                                player.money += winnings
                                self.events.append(f"{player.name} –∑–∞–±–∏—Ä–∞–µ—Ç {winnings} –ø–æ—Å–ª–µ 3 —Ä–∞—É–Ω–¥–æ–≤!")
                                casino_decision = False
                                self.awaiting_property_decision = None
                                player.must_resolve_tile = False
                            else:
                                self.events.append(f"{player.name}, —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –∑–∞–±–µ—Ä–µ—Ç–µ {winnings}?")
                                casino_decision = True
                                player.must_resolve_tile = True
                                self.awaiting_property_decision = {
                                    "player_id": player.id,
                                    "property_index": player.position,
                                    "cell": cell,
                                    "type": "casino",
                                    "round": rounds,
                                    "winnings": winnings
                                }
                        else:
                            if rounds == 1:
                                self.events.append(f"{player.name} –ø—Ä–æ–∏–≥—Ä–∞–ª —Å—Ç–∞–≤–∫—É {amount}! ")
                            else:
                                self.events.append(f"{player.name} –ø—Ä–æ–∏–≥—Ä–∞–ª —Å—Ç–∞–≤–∫—É {amount}, —Ö–æ—Ç—è –º–æ–≥ –∑–∞–±—Ä–∞—Ç—å {winnings}!")
                            casino_decision = False
                            self.awaiting_property_decision = None
                            player.must_resolve_tile = False

                    elif action == "casino_take":
                        if self.awaiting_property_decision["winnings"] == 0:
                            self.events.append(f"{player.name} –Ω–µ —Ä–∏—Å–∫–Ω—É–ª")
                        else:
                            winnings = self.awaiting_property_decision["winnings"]
                            player.money += winnings
                            self.events.append(f"{player.name} –∑–∞–±—Ä–∞–ª {winnings}$ –∏–∑ –∫–∞–∑–∏–Ω–æ.")
                        self.awaiting_property_decision = None
                        player.must_resolve_tile = False

                    elif action == "rent":
                        self.pay_rent(player, cell, self.last_dice_result["value"])
                        self.awaiting_property_decision = None
                        player.must_resolve_tile = False
                    elif action == "bankrot":
                        self.declare_bankruptcy(player)

                    elif action == "answer_quest":
                        user_answer = data.get("answer", "").strip().lower()
                        user_answer = f"{float(user_answer):.1f}" if user_answer != "" else 1001.0
                        correct = self.awaiting_property_decision["answer"].strip().lower()
                        reward = self.awaiting_property_decision["reward"]

                        if user_answer == correct:
                            if self.awaiting_property_decision["type"] == "jail_challenge":
                                self.events.append(f"{player.name} –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è –∏–∑ —Ç—é—Ä—å–º—ã")
                                player.in_jail = False
                                player.jail_turns = 0
                                jail_decision = True
                                self.awaiting_property_decision = None
                                player.must_resolve_tile = False
                                self.move_player(player, self.dice1 + self.dice2)
                            else:
                                player.money += reward
                                self.events.append(f"{player.name} –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø–æ–ª—É—á–∏–ª {reward}$")
                                self.awaiting_property_decision = None
                                player.must_resolve_tile = False
                        else:
                            if self.awaiting_property_decision["type"] == "jail_challenge":
                                self.events.append(f"{player.name} –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ç—é—Ä—å–º–µ. –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}.")
                                self.awaiting_property_decision = None
                                player.must_resolve_tile = False
                                jail_decision = True
                                self.game.next_turn(self.players)
                                if self.game.next_circle:
                                    self.decrement_zalogs()
                                    self.game.next_circle = False
                                self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
                                self.roll_dice_count = 0
                            else:
                                self.events.append(f"{player.name} –æ—à–∏–±—Å—è! –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}. –û–ø–ª–∞—Ç–∞ {reward}$")
                                self.awaiting_property_decision["wrong"] = True

                    if not casino_decision and self.awaiting_property_decision == None and not jail_decision:
                        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
                        self.awaiting_property_decision = None
                        player.must_resolve_tile = False 
                        if self.dice1 != self.dice2:
                            self.game.next_turn(self.players)
                            if self.game.next_circle:
                                self.decrement_zalogs()
                                self.game.next_circle = False
                            self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
                            self.roll_dice_count = 0
                        else:
                            self.roll_dice_count += 1
                            self.events.append(f"{player.name} —Ö–æ–¥–∏—Ç –µ—â–µ —Ä–∞–∑")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
            self.broadcast_game_state()

    def start_game(self):
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
        player_ids = [p.id for p in self.players if not p.is_spectator]
        first_player = random.choice(player_ids)
        self.game = Game(player_ids, first_player)
        self.events.append("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!")
        self.events.append(f"–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç {self.get_player_by_id(first_player).name}")
    
    def move_player(self, player, steps):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø–æ–ª–µ"""
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è

        if player.in_jail:
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ –≤ —Ç—é—Ä—å–º–µ
            player.jail_turns += 1
            if player.jail_turns >= 3:
                ###### –Ω–µ –≤—ã–±—Ä–æ—Å–∏–ª –¥—É–±–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–ø–ª–∞—Ç–∏—Ç—å
                reward = 100
                cell = self.board_data[player.position]
                self.events.append(f"{player.name} –ø–ª–∞—Ç–∏ –∑–∞ –≤—ã—Ö–æ–¥")
                player.must_resolve_tile = True
                self.awaiting_property_decision = {
                    "player_id": player.id,
                    "property_index": player.position,
                    "cell": cell,
                    "type": "exit_jail",
                    "question": "1",
                    "answer": "2",
                    "reward": reward,
                    "wrong": True
                }
                return
            else:
                cell = self.board_data[player.position]
                question = self.generate_math_question()
                self.events.append(f"{player.name} –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question['question']}")
                player.must_resolve_tile = True
                self.awaiting_property_decision = {
                    "player_id": player.id,
                    "property_index": player.position,
                    "cell": cell,
                    "type": "jail_challenge",
                    "question": question["question"],
                    "answer": question["answer"],
                    "reward": question["reward"],
                    "wrong": False
                }
                return     
        new_position = (player.position + steps) % len(self.board_data)
        if player.position > new_position and steps > 0:
            self.events.append(f"{player.name} –ø–æ–ª—É—á–∞–µ—Ç 200 –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫—Ä—É–≥–∞")
            player.money += 200
        player.position = new_position
        cell = self.board_data[player.position]

        self.events.append(f"{player.name} –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞ –ø–æ–ª–µ {cell['name']}")
        if cell["type"] == "start":
            self.events.append(f"{player.name} –ø–æ–ª—É—á–∞–µ—Ç 100 –∑–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ä—Ç")
            player.money += 100
            if self.dice1 != self.dice2:
                self.game.next_turn(self.players)
                if self.game.next_circle:
                                self.decrement_zalogs()
                                self.game.next_circle = False
                self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
                self.roll_dice_count = 0
            else:
                self.roll_dice_count += 1
                self.events.append(f"{player.name} —Ö–æ–¥–∏—Ç –µ—â–µ —Ä–∞–∑")

        elif cell["type"] in ["property", "cars", "utility"]:
            if cell["owner"] is None:
                # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º ‚Äî –∫–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –∫—É–ø–∏—Ç—å –∏–ª–∏ –∞—É–∫—Ü–∏–æ–Ω
                self.events.append(f"{player.name} –º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å {cell['name']} –∑–∞ ${cell['price']}")
                player.must_resolve_tile = True
                self.awaiting_property_decision = {
                    "player_id": player.id,
                    "property_index": player.position,
                    "cell": cell
                }
            elif cell["owner"] != player.id and cell["Zalog"] == None:
                owner = self.get_player_by_id(cell["owner"])
                rent = cell["rent"]
                if cell["type"] == "utility":
                    rent = cell["rent"] * steps
                player.must_resolve_tile = True
                self.events.append(f"{player.name} –¥–æ–ª–∂–µ–Ω –∑–∞–ø–ª–∞—Ç–∏—Ç—å {rent} –∏–≥—Ä–æ–∫—É {owner.name}")
                self.awaiting_property_decision = {
                    "player_id": player.id,
                    "property_index": player.position,
                    "cell": cell
                }
            else:
                if self.dice1 != self.dice2:
                    self.game.next_turn(self.players)
                    if self.game.next_circle:
                                self.decrement_zalogs()
                                self.game.next_circle = False
                    self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
                    self.roll_dice_count = 0
                else:
                    self.roll_dice_count += 1
                    self.events.append(f"{player.name} —Ö–æ–¥–∏—Ç –µ—â–µ —Ä–∞–∑")
        
        elif cell["type"] == "quest":
            event_type, specific_event = self.generate_random_quest_event()

            if specific_event == "math_question":
                question_data = self.generate_math_question()
                self.events.append(f"{player.name} –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞–Ω–∏–µ: {question_data['question']}")
                player.must_resolve_tile = True
                self.awaiting_property_decision = {
                    "player_id": player.id,
                    "property_index": player.position,
                    "cell": cell,
                    "type": "quest",
                    "question": question_data["question"],
                    "answer": question_data["answer"],
                    "reward": question_data["reward"],
                    "wrong": False
                }

            elif specific_event == "free_upgrade":
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ property
                upgradable = [i for i, cell in enumerate(self.board_data)
                              if cell.get("owner") == player.id and cell["type"] == "property" and cell["Zalog"] is None and cell["level"] < 5]
                if upgradable:
                    cell_index = random.choice(upgradable)
                    cell = self.board_data[cell_index]
                    cell["level"] = min(cell["level"] + 1, 5)
                    self.events.append(f"{player.name} –±–µ—Å–ø–ª–∞—Ç–Ω–æ —É–ª—É—á—à–∏–ª –∫–ª–µ—Ç–∫—É {cell['name']}")
                else:
                    self.events.append(f"{player.name} –Ω–µ –ø–æ–ª—É—á–∏–ª –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è")

                if self.dice1 != self.dice2:
                    self.game.next_turn(self.players)
                    if self.game.next_circle:
                                    self.decrement_zalogs()
                                    self.game.next_circle = False
                    self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
                    self.roll_dice_count = 0
                else:
                    self.roll_dice_count += 1
                    self.events.append(f"{player.name} —Ö–æ–¥–∏—Ç –µ—â–µ —Ä–∞–∑")

            elif specific_event == "fire":
                owned = [i for i, cell in enumerate(self.board_data)
                         if cell.get("owner") == player.id and cell["type"] in ["property", "cars", "utility"] and cell["Zalog"] is None]
                if owned:
                    index = random.choice(owned)
                    cell = self.board_data[index]
                    if cell["level"] > 0:
                        cell["level"] -= 1
                        self.bank += round(cell['price']/2)
                        cell["rent"] = cell["price"]*RENT_MULTIPLIERS[cell["level"]]
                        self.events.append(f"–ù–∞ –∫–ª–µ—Ç–∫–µ {cell['name']} –±—ã–ª –ø–æ–∂–∞—Ä! –£—Ä–æ–≤–µ–Ω—å —Å–Ω–∏–∂–µ–Ω.")
                    elif cell["Zalog"] is None:
                        cell["Zalog"] = 15
                        self.events.append(f"{cell['name']} –±—ã–ª –∑–∞–ª–æ–∂–µ–Ω –∏–∑-–∑–∞ –ø–æ–∂–∞—Ä–∞.")
                else:
                    self.events.append(f"{player.name} –Ω–∏—á–µ–≥–æ –Ω–µ –∏–º–µ–µ—Ç")
                if self.dice1 != self.dice2:
                    self.game.next_turn(self.players)
                    if self.game.next_circle:
                                    self.decrement_zalogs()
                                    self.game.next_circle = False
                    self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
                    self.roll_dice_count = 0
                else:
                    self.roll_dice_count += 1
                    self.events.append(f"{player.name} —Ö–æ–¥–∏—Ç –µ—â–µ —Ä–∞–∑")

            elif specific_event == "jump_to_utility": ####cars
                current_pos = player.position
                for i in range(1, len(self.board_data)):
                    check_index = (current_pos + i) % len(self.board_data)
                    if self.board_data[check_index]["type"] == "cars":
                        self.events.append(f"{player.name} –ø—Ä—ã–≥–Ω—É–ª –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é cars: {self.board_data[check_index]['name']}")
                        self.move_player(player, i)
                        break

            elif specific_event == "stumble_steps":
                direction = random.choice([-1, 1])
                steps = random.randint(1, 6)
                new_pos = (player.position + direction * steps) % len(self.board_data)
                self.events.append(f"{player.name} –∑–∞–≥—É–ª—è–ª –∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ {steps} –∫–ª–µ—Ç–æ–∫ {'–Ω–∞–∑–∞–¥' if direction == -1 else '–≤–ø–µ—Ä—ë–¥'}")
                self.move_player(player, direction * steps)

            elif specific_event == "bonus_from_bank":
                bonus = self.bank // 4
                player.money += bonus
                self.bank -= bonus
                self.events.append(f"{player.name} –ø–æ–ª—É—á–∏–ª {bonus}$ –æ—Ç –±–∞–Ω–∫–∞")
                if self.dice1 != self.dice2:
                    self.game.next_turn(self.players)
                    if self.game.next_circle:
                                    self.decrement_zalogs()
                                    self.game.next_circle = False
                    self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
                    self.roll_dice_count = 0
                else:
                    self.roll_dice_count += 1
                    self.events.append(f"{player.name} —Ö–æ–¥–∏—Ç –µ—â–µ —Ä–∞–∑")

            elif specific_event == "old_insurance":
                zalogged = sum(1 for cell in self.board_data if cell.get("owner") == player.id and cell.get("Zalog") is not None)
                reward = zalogged * 25
                player.money += reward
                self.events.append(f"{player.name} –ø–æ–ª—É—á–∏–ª —Å—Ç—Ä–∞—Ö–æ–≤–∫—É: {reward}$ –∑–∞ {zalogged} –∑–∞–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫")
                if self.dice1 != self.dice2:
                    self.game.next_turn(self.players)
                    if self.game.next_circle:
                                    self.decrement_zalogs()
                                    self.game.next_circle = False
                    self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
                    self.roll_dice_count = 0
                else:
                    self.roll_dice_count += 1
                    self.events.append(f"{player.name} —Ö–æ–¥–∏—Ç –µ—â–µ —Ä–∞–∑")

            elif specific_event == "bonus_for_upgrades":
                upgraded = sum(1 for cell in self.board_data if cell.get("owner") == player.id and cell.get("level", 0) > 0)
                reward = upgraded * 50
                if reward>0:
                    self.events.append(f"{player.name} –¥–æ–ª–∂–µ–Ω –∑–∞–ø–ª–∞—Ç–∏—Ç—å: {reward}$ –∑–∞ {upgraded} —É–ª—É—á—à–µ–Ω–∏–π")
                    player.must_resolve_tile = True
                    self.awaiting_property_decision = {
                        "player_id": player.id,
                        "property_index": player.position,
                        "cell": cell,
                        "type": "bonus_for_upgrades",
                        "question": "1",
                        "answer": "2",
                        "reward": reward,
                        "wrong": True
                    }
                else:
                    self.events.append(f"{player.name} –ø—Ä–æ–∫–∞—á–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å")
                    if self.dice1 != self.dice2:
                        self.game.next_turn(self.players)
                        if self.game.next_circle:
                                        self.decrement_zalogs()
                                        self.game.next_circle = False
                        self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
                        self.roll_dice_count = 0
                    else:
                        self.roll_dice_count += 1
                        self.events.append(f"{player.name} —Ö–æ–¥–∏—Ç –µ—â–µ —Ä–∞–∑")

            elif specific_event == "donate_to_bank":
                amount = max(100, (player.money//50)*10)
                self.events.append(f"{player.name} –¥–æ–ª–∂–µ–Ω –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª {amount}$ –≤ –±–∞–Ω–∫")
                player.must_resolve_tile = True
                self.awaiting_property_decision = {
                    "player_id": player.id,
                    "property_index": player.position,
                    "cell": cell,
                    "type": "donate_to_bank",
                    "question": "1",
                    "answer": "2",
                    "reward": amount,
                    "wrong": True
                }


            elif specific_event == "share_with_others":
                per_player = max(50, (player.money//500)*25)
                others = [p for p in self.players if p.id != player.id and not p.is_spectator]
                if others:
                    total = per_player * len(others)
                    self.events.append(f"{player.name} –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏, –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –ø–æ {per_player}$")
                    player.must_resolve_tile = True
                    self.awaiting_property_decision = {
                        "player_id": player.id,
                        "property_index": player.position,
                        "cell": cell,
                        "type": "share_with_others",
                        "question": "1",
                        "answer": "2",
                        "reward": total,
                        "wrong": True
                    }
                else:
                    self.events.append(f"{player.name} –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç?")


        elif cell["type"] == "tax":
            tax = cell["price"]
            self.events.append(f"{player.name} –¥–æ–ª–∂–µ–Ω –∑–∞–ø–ª–∞—Ç–∏—Ç—å {tax} –∑–∞ –Ω–∞–ª–æ–≥")
            player.must_resolve_tile = True
            self.awaiting_property_decision = {
                    "player_id": player.id,
                    "property_index": player.position,
                    "cell": cell
                }

        elif cell["type"] == "casino":
            self.events.append(f"{player.name} –∑–∞—à–µ–ª –≤ –∫–∞–∑–∏–Ω–æ! –°–∫–æ–ª—å–∫–æ –æ–Ω —Ç–∞–º –æ—Å—Ç–∞–≤–∏—Ç?")
            player.must_resolve_tile = True
            self.awaiting_property_decision = {
                "player_id": player.id,
                "property_index": player.position,
                "cell": cell,
                "type": "casino",
                "round": 1,
                "winnings": 0
            }

        elif cell["type"] == "gotojail":
            self.events.append(f"{player.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç—é—Ä—å–º—É –∑–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è!")
            player.position = next(i for i, c in enumerate(self.board_data) if c["type"] == "jail")
            player.in_jail = True
            player.jail_turns = 0
            self.game.next_turn(self.players)
            if self.game.next_circle:
                                self.decrement_zalogs()
                                self.game.next_circle = False
            self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
            self.roll_dice_count = 0
            return

        elif cell["type"] == "jail":
            self.events.append(f"{player.name} –ø–æ—Å–µ—Ç–∏–ª –∫–æ–µ-–∫–æ–≥–æ –≤ —Ç—å—Ä—å–º–µ! –ü–æ—Å–∏–¥–∏, –ø–æ–≥–æ–≤–æ—Ä–∏")
            self.game.next_turn(self.players)
            if self.game.next_circle:
                                self.decrement_zalogs()
                                self.game.next_circle = False
            self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
            self.roll_dice_count = 0

        # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–µ—Ç–∫–∏ —Å—Ä–∞–∑—É —Å–æ–æ–±—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
        self.broadcast_game_state()

    def generate_random_operand(self):
        values = [i for i in range(-15, 15) if i != 0]
        return random.choice(values)

    def generate_expression(self, depth=0, max_depth=3):
        if depth >= max_depth or random.random() < 0.3:
            # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ–±–µ—Ä–Ω—É—Ç–æ–µ —É–Ω–∞—Ä–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
            operand = self.generate_random_operand()
            if random.random() < 0.4:
                template, _, _ = random.choice(self.UNARY_OPS)
                return template.format(x=operand)
            else:
                return operand

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        left = self.generate_expression(depth + 1, max_depth)
        right = self.generate_expression(depth + 1, max_depth)
        op, _, _ = random.choice(self.BINARY_OPS)
        return f"({left} {op} {right})"

    def safe_eval(self, expr):
        try:
            return eval(expr, {"__builtins__": None, "math": math})
        except Exception:
            return None

    def generate_math_question(self):
        for _ in range(100):  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—Ç—Ä–µ–≤–∞—Ç—å
            expr = self.generate_expression(max_depth=random.randint(3, 4))
            result = self.safe_eval(expr)

            if result is None:
                continue

            try:
                result = round(result, 1)
            except Exception:
                continue

            if abs(result) > 1000:
                continue

            if abs(result) == 0:
                result = abs(result)
            # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            difficulty = expr.count('+') + expr.count('-') + \
                         expr.count('*') * 2 + expr.count('/') * 2 + \
                         expr.count('%') * 3 + expr.count('**') * 3 + \
                         expr.count('abs') + expr.count('sqrt') * 4
            if (difficulty < 5 or difficulty > 10):
                continue
            reward = min(round((10 + difficulty * 15)/2), 100)
            print(f"question: {expr}, answer: {result:.1f}, reward: {reward}, difficulty: {difficulty}")
            return {
                "question": f"–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {expr}?",
                "answer": f"{result:.1f}",
                "reward": reward
            }

        # üí° –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –≤—ã–¥–∞—ë–º –∑–∞–ø–∞—Å–Ω–æ–π
        expr = "2 + 2"
        result = 4
        reward = 10
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∑–∞–ø–∞—Å–Ω–æ–π –≤–æ–ø—Ä–æ—Å.")
        return {
            "question": f"–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {expr}?",
            "answer": f"{result:.1f}",
            "reward": reward
        }

    def generate_random_quest_event(self):
        x = random.randint(1,10)
        
        if x < 3:
            event_type = "task"
        elif x < 5:
            event_type = "upgrade"
        elif x < 7:
            event_type = "move"
        elif x < 9:
            event_type = "bonus"
        else:
            event_type = "penalty"

        QUEST_EVENTS = {
            "task": [
                "math_question"
            ],
            "upgrade": [
                # "free_upgrade",    # ¬´–¢–æ—Ä–≥–∞—à¬ª
                "fire"             # ¬´–ü–æ–∂–∞—Ä¬ª
            ],
            "move": [
                "jump_to_utility", # ¬´–ü—Ä—ã–∂–æ–∫ —á–µ—Ä–µ–∑ –ø–æ–ª–µ¬ª
                "stumble_steps"    # ¬´–¢—ã –∑–∞–≥—É–ª—è–ª¬ª
            ],
            "bonus": [
                "bonus_from_bank",         # ¬´–ë–∞–Ω–∫¬ª
                "old_insurance",           # ¬´–°—Ç–∞—Ä–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞¬ª
            ],
            "penalty": [
                "bonus_for_upgrades",      # ¬´"–ü—Ä–µ–º–∏—è"¬ª
                "donate_to_bank",          # ¬´–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å¬ª
                "share_with_others"        # ¬´–ü–æ–¥–µ–ª–∏—Å—å —Å –±–µ–¥–Ω—ã–º–∏¬ª
            ]
        }

        specific_event = random.choice(QUEST_EVENTS[event_type])
        return event_type, specific_event

    def buy_property(self, player):
        """–ü–æ–∫—É–ø–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–æ–º"""
        cell = self.board_data[player.position]
            
        if player.money >= cell["price"]:
            player.money -= cell["price"]
            cell["owner"] = player.id
            cell["color_owner"] = player.color
            player.properties.append(player.position)
            self.events.append(f"{player.name} –ø–æ–∫—É–ø–∞–µ—Ç {cell['name']} –∑–∞ ${cell['price']}")
        else:
            # –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥, –Ω–∞—á–∏–Ω–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω
            self.events.append(f"{player.name} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {cell['name']} –∑–∞ ${cell['price']}")
    
    def pay_rent(self, player, cell, value):
        """–û–ø–ª–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã –∑–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"""
        owner = self.get_player_by_id(cell["owner"])
        
        if owner.bankrupt or cell["Zalog"] is not None:
            return  # –ù–µ –ø–ª–∞—Ç–∏–º, –µ—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –æ–±–∞–Ω–∫—Ä–æ—Ç–∏–ª—Å—è –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤ –∑–∞–ª–æ–≥–µ
                
        rent = cell["rent"]
        if cell["type"] == "utility":
            rent = cell["rent"]*value
        
        player.money -= rent
        owner.money += rent
        self.events.append(f"{player.name} –ø–ª–∞—Ç–∏—Ç {owner.name} {rent}$ –∑–∞ –∞—Ä–µ–Ω–¥—É {cell['name']}")
    
    def start_auction(self, player):
        """–ù–∞—á–∞–ª–æ –∞—É–∫—Ü–∏–æ–Ω–∞ –∑–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"""
        cell = self.board_data[player.position]
        self.auction = {
            "property_index": player.position,
            "cell": cell,
            "current_bid": cell["price"] - 1,
            "leader_id": None,
            "active_bidders": [
                p.id for p in self.players if not p.bankrupt and not p.is_spectator and p.id != player.id
            ],
            "bid_history": {},
            "already_bid": set(),
            "turn_index": 0,
            "starter_id": player.id,
            "awaiting_bidder": None  # –î–æ–±–∞–≤–∏–º —ç—Ç–æ –ø–æ–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞
        }
        
        # Set the first bidder
        if self.auction["active_bidders"]:
            self.auction["awaiting_bidder"] = self.auction["active_bidders"][0]
            self.events.append(f"–ê—É–∫—Ü–∏–æ–Ω –∑–∞ {cell['name']} –Ω–∞—á–∞–ª—Å—è! –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${self.auction['current_bid'] + 1}")
            self.events.append(f"–•–æ–¥ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ: {self.get_player_by_id(self.auction['awaiting_bidder']).name}")

            self.awaiting_property_decision = {
                                    "player_id": self.auction["awaiting_bidder"],
                                    "property_index": self.auction["property_index"],
                                    "cell": self.auction["cell"],
                                    "type": "auction"
            }
            player.must_resolve_tile = False

        else:
            # No other players to participate in auction
            self.events.append(f"–ù–µ–∫–æ–º—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –∑–∞ {cell['name']}")
            self.awaiting_property_decision = None
            player.must_resolve_tile = False
            # End auction and move to next player
            if self.dice1 != self.dice2:
                self.game.next_turn(self.players)
                if self.game.next_circle:
                                self.decrement_zalogs()
                                self.game.next_circle = False
                self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
                self.roll_dice_count = 0
            else:
                self.roll_dice_count += 1
                self.events.append(f"{player.name} —Ö–æ–¥–∏—Ç –µ—â–µ —Ä–∞–∑")
            self.auction = None
            
        self.broadcast_game_state()
    
    def process_bid(self, player, amount):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ"""
        if not self.auction or player.id != self.auction.get("awaiting_bidder"):
            return

        self.auction["current_bid"] = amount
        self.auction["leader_id"] = player.id
        self.auction["bid_history"][player.id] = amount
        self.auction["already_bid"].add(player.id)
        self.events.append(f"{player.name} –ø–æ—Å—Ç–∞–≤–∏–ª ${amount}!")
        self._next_auction_turn(player)
        self.broadcast_game_state()

    def process_pass(self, player):
        if not self.auction or player.id != self.auction.get("awaiting_bidder"):
            return

        if player.id in self.auction["bid_history"]:
            penalty = self.auction["bid_history"][player.id] // 10
            player.money -= penalty
            self.events.append(f"{player.name} –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∞—É–∫—Ü–∏–æ–Ω–∞ –∏ —Ç–µ—Ä—è–µ—Ç ${penalty}")
        else:
            self.events.append(f"{player.name} –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ")

        if player.id in self.auction["active_bidders"]:
            self.auction["active_bidders"].remove(player.id)

        if len(self.auction["active_bidders"]) == 1 and not self.auction['bid_history']:
            self._next_auction_turn(player)
        else:
            self.end_auction(player)

    def end_auction(self, player):
        """–ò–≥—Ä–æ–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∞—É–∫—Ü–∏–æ–Ω"""
        if not self.auction or player.id != self.auction.get("awaiting_bidder"):
            return

        if len(self.auction["active_bidders"]) == 1:
            # One bidder left - they win
            winner_id = self.auction["active_bidders"][0]
            winner = self.get_player_by_id(winner_id)
            cell = self.auction["cell"]

            # If leader was set, use their bid, otherwise use minimum bid
            if self.auction["leader_id"] is not None:
                final_bid = self.auction["current_bid"]
            else:
                final_bid = cell["price"]
            
            winner.money -= final_bid
            cell["owner"] = winner.id
            cell["color_owner"] = winner.color
            winner.properties.append(self.auction["property_index"])
            self.events.append(f"{winner.name} –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –∞—É–∫—Ü–∏–æ–Ω –∏ –ø–æ–∫—É–ø–∞–µ—Ç {cell['name']} –∑–∞ ${final_bid}")

            # End auction and move to next player's turn
            starter_id = self.auction["starter_id"]
            self.auction = None
            player = self.get_player_by_id(starter_id)

            self.awaiting_property_decision = None
            player.must_resolve_tile = False

            if self.dice1 != self.dice2:
                self.game.next_turn(self.players)
                if self.game.next_circle:
                                self.decrement_zalogs()
                                self.game.next_circle = False
                self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
                self.roll_dice_count = 0
            else:
                self.roll_dice_count += 1
                self.events.append(f"{player.name} —Ö–æ–¥–∏—Ç –µ—â–µ —Ä–∞–∑")

        elif len(self.auction["active_bidders"]) == 0:
            # All players passed - no one gets the property
            self.events.append("–í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –∫–ª–µ—Ç–∫—É")
            
            # End auction and move to next player's turn
            starter_id = self.auction["starter_id"]
            self.auction = None

            self.awaiting_property_decision = None
            player.must_resolve_tile = False

            if self.dice1 != self.dice2:
                self.game.next_turn(self.players)
                if self.game.next_circle:
                                self.decrement_zalogs()
                                self.game.next_circle = False
                self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
                self.roll_dice_count = 0
            else:
                self.roll_dice_count += 1
                self.events.append(f"{player.name} —Ö–æ–¥–∏—Ç –µ—â–µ —Ä–∞–∑")
        else:
            # Continue to next bidder
            self._next_auction_turn()
            
        self.broadcast_game_state()
    
    def get_next_player_id(self, current_id):
        ids = [p.id for p in self.players if not p.bankrupt and not p.is_spectator]
        if current_id not in ids:
            return ids[0]
        index = ids.index(current_id)
        return ids[(index + 1) % len(ids)]

    def _next_auction_turn(self, player):
        """–ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É"""
        if not self.auction or not self.auction["active_bidders"]:
            return
        if len(self.auction["active_bidders"]) < 2 and self.auction['bid_history']:
            print("go")
            self.end_auction(player)
            return
        # Find next active bidder
        current_idx = 0
        if self.auction["awaiting_bidder"] in self.auction["active_bidders"]:
            current_idx = self.auction["active_bidders"].index(self.auction["awaiting_bidder"])
        
        next_idx = (current_idx + 1) % len(self.auction["active_bidders"])
        self.auction["awaiting_bidder"] = self.auction["active_bidders"][next_idx]
        
        # Update events
        next_player = self.get_player_by_id(self.auction["awaiting_bidder"])
        if next_player:
            self.events.append(f"–•–æ–¥ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ: {next_player.name}, —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: ${self.auction['current_bid']}")

    def mortgage_property(self, player, property_index):
        """–ó–∞–ª–æ–≥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"""
        if property_index not in player.properties:
            return
            
        cell = self.board_data[property_index]
        
        if cell["Zalog"] is not None:
            return  # –£–∂–µ –≤ –∑–∞–ª–æ–≥–µ
            
        mortgage_value = cell["price"] / 2
        player.money += mortgage_value
        cell["Zalog"] = 15  # 15 —Ö–æ–¥–æ–≤ –Ω–∞ –≤—ã–∫—É–ø
        self.events.append(f"{player.name} –∑–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç {cell['name']}")
    
    def unmortgage_property(self, player, property_index):
        """–í—ã–∫—É–ø —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑ –∑–∞–ª–æ–≥–∞"""
        if property_index not in player.properties:
            return
            
        cell = self.board_data[property_index]
        
        if cell["Zalog"] is None:
            return  # –ù–µ –≤ –∑–∞–ª–æ–≥–µ
            
        unmortgage_cost = int(cell["price"] * 0.6)  # 120% –æ—Ç –∑–∞–ª–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        player.money -= unmortgage_cost
        cell["Zalog"] = None
        self.events.append(f"{player.name} –≤—ã–∫—É–ø–∞–µ—Ç {cell['name']} –∑–∞ ${unmortgage_cost}")
    
    def upgrade_property(self, player, property_index):
        """–£–ª—É—á—à–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"""
        if property_index not in player.properties:
            return
            
        cell = self.board_data[property_index]
        
        if cell["type"] != "property" or cell["Zalog"] is not None:
            return
            
        upgrade_cost = cell["price"] / 2
        player.money -= upgrade_cost
        cell["level"] += 1
        cell["rent"] = cell["price"]*RENT_MULTIPLIERS[cell["level"]]
        self.events.append(f"{player.name} —É–ª—É—á—à–∞–µ—Ç {cell['name']} –¥–æ —É—Ä–æ–≤–Ω—è {cell['level']}")
    
    def downgrade_property(self, player, property_index):
        """–ü—Ä–æ–¥–∞–∂–∞ —É–ª—É—á—à–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"""
        if property_index not in player.properties:
            return
            
        cell = self.board_data[property_index]
        
        if cell["type"] != "property" or cell["level"] == 0 or cell["Zalog"] is not None:
            return
            
        sell_value = cell["price"] / 2
        player.money += sell_value
        cell["level"] -= 1
        cell["rent"] = cell["price"]*RENT_MULTIPLIERS[cell["level"]]
        self.events.append(f"{player.name} –ø–æ–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å {cell['name']} –¥–æ {cell['level']}")
    
    def decrement_zalogs(self):
        """–£–º–µ–Ω—å—à–∞–µ—Ç –∑–∞–ª–æ–≥ —É –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å. –û–±–Ω—É–ª—è–µ—Ç –≤–ª–∞–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏"""
        self.count_circle += 1
        self.bank += 10
        for cell in self.board_data:
            if cell.get("Zalog") is not None:
                cell["Zalog"] -= 1
                if cell["Zalog"] <= 0:
                    prev_owner = cell["owner"]
                    cell["Zalog"] = None
                    cell["owner"] = None
                    cell["color_owner"] = None
                    self.events.append(f"{self.get_player_by_id(prev_owner).name} —Ç–µ—Ä—è–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ: {cell['name']}")

        if (self.count_circle % 10) == 0:
            self.bank = round(self.bank * 1.5)

            bonus = 0
            player_values = []
            for player in self.players:
                if player.bankrupt:
                    continue
                wasmoney = player.money
                total = 0
                for i in player.properties:
                    cell = self.board_data[i]
                    if cell["type"] == "property":
                        if cell["Zalog"] is None:
                            bonus += round(abs(cell["level"] - 5) * 0.1 * round(cell["price"] / 2))
                        total += cell["level"] * round(cell["price"] / 2)
                    if cell["Zalog"] is None:
                        total += cell["price"]
                    else:
                        total += round(cell["price"] / 2)
                player.money += bonus
                self.events.append(f"{player.name} –ø–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ: {bonus}$")
                
                total += player.money
                self.events.append(f"{player.name} –∏–º–µ–ª {wasmoney}$, —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç {player.money} –∏ –≤—Å–µ–≥–æ –∞–∫—Ç–∏–≤–æ–≤ –Ω–∞ {total}$")
                if (self.count_circle % 25) == 0:
                    player.money -= total * min((self.count_circle // 25) * 0.05, 0.5)
                    player.money -= (self.count_circle // 25)*200
                    self.bank = round(self.bank * 0.5)
                player_values.append((player, total))

            if (self.count_circle % 25) == 0:
                self.events.append(f"–ò–Ω—Ñ–ª—è—Ü–∏—è")

            if player_values:
                poorest_player, min_value = min(player_values, key=lambda item: item[1])
                bonus = min(self.count_circle // 10 * 100, 500)
                if bonus > self.bank:
                    bonus = self.bank
                    self.events.append(f"–ë–∞–Ω–∫ –º–∞–ª–µ–Ω—å–∫–∏–π")
                poorest_player.money += bonus
                self.bank -= bonus
                self.events.append(f"{poorest_player.name} –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–º–æ—â—å –∏–∑ –±–∞–Ω–∫–∞: {bonus}$")

            if self.is_mode:
                self.refresh_board()
        
        self.broadcast_game_state()

    def propose_trade(self, player, trade_data):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏"""
        receiving_id = trade_data.get("receiving_id")
        if receiving_id == player.id:
            return  # –ù–µ–ª—å–∑—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–¥–µ–ª–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ
            
        receiving_player = self.get_player_by_id(receiving_id)
        if not receiving_player or receiving_player.bankrupt:
            return 
        self.trade_offer = {
            "offering_id": player.id,
            "receiving_id": receiving_id,
            "offering_property": list(trade_data["properties_offer"]),
            "receiving_property": list(trade_data["properties_request"]),
            "offering_money": trade_data.get("money_offer", 0),
            "receiving_money": trade_data.get("money_request", 0),
            "old_decision": trade_data.get("old_decision", None)
        }

        player.must_resolve_tile = True
        self.awaiting_property_decision = {
            "player_id": player.id,
            "property_index": player.position,
            "type": "trade"
        }
            
        self.events.append(f"{player.name} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–¥–µ–ª–∫—É {receiving_player.name}")
    
    def process_trade_response(self, player, accepted):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        if not hasattr(self, 'trade_offer') or player.id != self.trade_offer["receiving_id"]:
            return

        offering_player = self.get_player_by_id(self.trade_offer["offering_id"])
        receiving_player = player

        if accepted:
            # –î–µ–Ω—å–≥–∏
            offering_player.money -= self.trade_offer["offering_money"]
            offering_player.money += self.trade_offer["receiving_money"]

            receiving_player.money += self.trade_offer["offering_money"]
            receiving_player.money -= self.trade_offer["receiving_money"]

            # –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—é—â–µ–≥–æ
            for i, selected in enumerate(self.trade_offer["offering_property"]):
                if selected:
                    offering_player.properties.remove(i)
                    receiving_player.properties.append(i)
                    self.board_data[i]["owner"] = receiving_player.id
                    self.board_data[i]["color_owner"] = receiving_player.color

            # –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            for i, selected in enumerate(self.trade_offer["receiving_property"]):
                if selected:
                    receiving_player.properties.remove(i)
                    offering_player.properties.append(i)
                    self.board_data[i]["owner"] = offering_player.id
                    self.board_data[i]["color_owner"] = offering_player.color

            self.events.append(f"–°–¥–µ–ª–∫–∞ –º–µ–∂–¥—É {offering_player.name} –∏ {receiving_player.name} —Å–æ—Å—Ç–æ—è–ª–∞—Å—å!"
            )
        else:
            self.events.append(f"{receiving_player.name} –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–¥–µ–ª–∫—É –æ—Ç {offering_player.name}")

        self.awaiting_property_decision = self.trade_offer["old_decision"]
        self.trade_offer = None
        offering_player.must_resolve_tile = False
        self.broadcast_game_state()
    
    def declare_bankruptcy(self, player):
        """–û–±—ä—è–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–∞"""
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
        for prop_index in player.properties:
            if self.board_data[prop_index]["type"] == "property":
                player.money += self.board_data[prop_index]["level"]*round(self.board_data[prop_index]["price"]/2)
            if self.board_data[prop_index]["Zalog"] == None:
                player.money += self.board_data[prop_index]["price"]
            else:
                player.money += round(self.board_data[prop_index]["price"]/2)
            self.board_data[prop_index]["owner"] = None
            self.board_data[prop_index]["level"] = 0
            self.board_data[prop_index]["rent"] = self.board_data[prop_index]["price"]//10
            self.board_data[prop_index]["Zalog"] = None
            self.board_data[prop_index]["color_owner"] = None

        if self.awaiting_property_decision["cell"]["owner"] == None:
            self.bank += player.money
        else:
            owner_player = self.get_player_by_id(self.awaiting_property_decision["cell"]["owner"])
            if player.money < self.awaiting_property_decision["cell"]["rent"]:
                owner_player.money += player.money
            else:
                owner_player.money += self.awaiting_property_decision["cell"]["rent"]
                self.bank += player.money - self.awaiting_property_decision["cell"]["rent"]
        player.money = 0

        self.awaiting_property_decision = None
        player.must_resolve_tile = False

        if self.dice1 == self.dice2:
            self.game.next_turn(self.players)
            if self.game.next_circle:
                self.decrement_zalogs()
                self.game.next_circle = False
            self.events.append(f"–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {self.get_player_by_id(self.game.current_player).name}")
            self.roll_dice_count = 0
        player.bankrupt = True
        
        player.properties.clear()
        self.events.append(f"{player.name} –æ–±—ä—è–≤–ª–µ–Ω –±–∞–Ω–∫—Ä–æ—Ç–æ–º!")

        player.is_spectator = True
        player.id = None  # –¥–µ–ª–∞–µ—Ç –µ–≥–æ "–∞–Ω–æ–Ω–∏–º–Ω—ã–º"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
        self.check_game_end()
        self.broadcast_game_state()
    
    def check_game_end(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã"""
        active_players = [p for p in self.players if not p.bankrupt]
        if len(active_players) == 1:
            self.game.winner = active_players[0].id
            self.events.append(f"{active_players[0].name} –ø–æ–±–µ–∂–¥–∞–µ—Ç –≤ –∏–≥—Ä–µ!")
        self.broadcast_game_state()

    
    def get_player_by_id(self, player_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ ID"""
        return next((p for p in self.players if p.id == player_id), None)
    
    def update_board_rents_and_zalogs(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞—Ä–µ–Ω–¥—É –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ª–æ–≥–æ–≤ –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫"""
        for cell in self.board_data:
            owner_id = cell.get("owner")
            if owner_id is not None:
                if cell["type"] == "property":
                    group_cells = [c for c in self.board_data if c.get("category") == cell.get("category")]
                    if all(c.get("owner") == owner_id for c in group_cells) and cell.get("level", 0) == 0:
                        cell["rent"] = cell["price"] * RENT_MULTIPLIERS[0] * 2

                elif cell["type"] == "cars":
                    owner_cells = [c for c in self.board_data if c["type"] == "cars" and c.get("owner") == owner_id]
                    count = len(owner_cells)
                    cell["rent"] = (25+(self.count_circle // 10)*7)*(2**(count-1))

                elif cell["type"] == "utility":
                    owner_cells = [c for c in self.board_data if c["type"] == "utility" and c.get("owner") == owner_id]
                    count = len(owner_cells)
                    if count == 1:
                        rent = 10 + (self.count_circle // 10)
                    elif count >= 2:
                        rent = 25 + (self.count_circle // 10)
                    else:
                        rent = 0
                    cell["rent"] = rent
    
    def broadcast_game_state(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã"""
        # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        self.update_board_rents_and_zalogs()  # ‚¨Ö –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è

        current_state = {
            "players": [p.to_dict() for p in self.players],
            "board": self.board_data,
            "game": {
                "current_player": self.game.current_player if self.game else None,
                "winner": self.game.winner if self.game else None
            },
            "events": self.events[-30:],
            # "auction": getattr(self, 'auction', None),
            "trade_offer": getattr(self, 'trade_offer', None),
            "abilities": [
                {"player_id": pid, "abilities": ab_list}
                for pid, ab_list in self.abilities_by_player.items()
            ]
        }
        if hasattr(self, "last_dice_result"):
            current_state["dice_result"] = self.last_dice_result
        else:
            current_state["dice_result"] = None

        if self.awaiting_property_decision:
            current_state["awaiting_property_decision"] = self.awaiting_property_decision

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–∫—Ü–∏–æ–Ω–µ, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        if hasattr(self, 'auction') and self.auction is not None:
            current_state["auction"] = {
                "property_index": self.auction["property_index"],
                "cell_name": self.auction["cell"]["name"],
                "current_bid": self.auction["current_bid"],
                "leader_id": self.auction["leader_id"],
                "awaiting_bidder": self.auction["awaiting_bidder"],
                "active_bidders": self.auction["active_bidders"]
            }
        else:
            current_state["auction"] = None
        current_state["board_id"] = self.board_id
        current_state["count_circle"] = self.count_circle
        current_state["bank"] = self.bank

        # –ö—ç—à–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if not hasattr(self, 'last_broadcast_state') or current_state != self.last_broadcast_state:
            self.last_broadcast_state = current_state
            serialized_state = pickle.dumps(current_state)
            size_data = struct.pack('!I', len(serialized_state))
            
            for player in self.players:
                try:
                    player.conn.send(size_data)
                    player.conn.send(serialized_state)
                except:
                    pass  # –ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è

        if self.trade_offer:
            current_state["trade_offer"] = self.trade_offer


if __name__ == "__main__":
    server = Server()
    server.start()